name: Hotfix

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version to fix (e.g. 123)'
        required: true

jobs:
  checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: releases/${{ github.event.inputs.release_version }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.task }}
        run: npm run ${{ matrix.task }}

  fix:
    needs: checks
    runs-on: ubuntu-latest
    env:
      REGISTRY_ID: crph4codaco7ibpqes0d
      IMAGE_NAME: "app"
      RELEASE_VERSION: ${{ github.event.inputs.release_version }}
      FIX_VERSION: ${{ github.run_number }}
      YC_SERVICE_ACCOUNT_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: releases/${{ env.RELEASE_VERSION }}

      - name: Install Yandex Cloud CLI
        run: |
          curl -s https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Configure Docker to use Yandex Cloud registry
        env:
          YC_SERVICE_ACCOUNT_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
        run: |
          echo "${YC_SERVICE_ACCOUNT_KEY_JSON}" > key.json
          yc config set service-account-key key.json
          yc config set cloud-id b1gr908prd2uo9dahreb
          yc config set folder-id b1gre28ftdr7otqsp4c7
          yc container registry configure-docker

      - name: Build docker image
        run: |
          docker build -t cr.yandex/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}_fix${{ env.FIX_VERSION }} \
                       -t cr.yandex/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}_latest .

      - name: Push docker images
        run: |
          docker push cr.yandex/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}_fix${{ env.FIX_VERSION }}
          docker push cr.yandex/${{ env.REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}_latest

      - name: Create git tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ env.RELEASE_VERSION }}_fix${{ env.FIX_VERSION }}
          git push origin ${{ env.RELEASE_VERSION }}_fix${{ env.FIX_VERSION }}

      - name: Get previous tag
        id: previous_tag
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ || echo "")
          echo "prev_tag=${PREV_TAG}" >> $GITHUB_OUTPUT

      - name: Get commits since last tag
        id: changelog
        run: |
          if [ -z "${{ steps.previous_tag.outputs.prev_tag }}" ]; then
            COMMITS=$(git log --pretty=format:"* %s" HEAD)
          else
            COMMITS=$(git log --pretty=format:"* %s" ${{ steps.previous_tag.outputs.prev_tag }}..HEAD)
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on release issue
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split("T")[0];
            const actor = context.actor;
            const releaseVersion = "${{ env.RELEASE_VERSION }}";
            const fixVersion = "${{ env.FIX_VERSION }}";
            const commits = `${{ steps.changelog.outputs.commits }}`;
            const imageLink = `cr.yandex/${process.env.REGISTRY_ID}/${process.env.IMAGE_NAME}:${releaseVersion}_fix${fixVersion}`;
            const body = `## Hotfix ${fixVersion} for release ${releaseVersion}\n\n` +
                         `- **Date:** ${date}\n` +
                         `- **Author:** ${actor}\n\n` +
                         `### Commits:\n${commits}\n\n` +
                         `**Docker Image:** \`${imageLink}\``;

            // Find release issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            const releaseIssue = issues.data.find(issue => 
              issue.title.includes(`Release ${releaseVersion}`)
            );

            if (releaseIssue) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: releaseIssue.number,
                body: body
              });
            }